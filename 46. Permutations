Link: https://leetcode.com/problems/permutations/description/

Permutation can be implemented by recursion and iteration.

Recursion:
class Solution(object):
    def permute(self, nums):
        # if the permute(nums[:-1])=x is known, 
        # then permute(nums) = [x[:i] +[nums[-1]]+x[i:] for i in range(len(nums)]
            
        if len(nums)==1:
            return [nums]

        x = self.permute(nums[:-1])
        return [y[:i] +[nums[-1]]+y[i:] for y in x for i in range(len(nums)) ]


Iteration:
class Solution(object):
    def permute(self, nums):
        ans = [[]]

        for num in nums:
            ans = [x[:i]+[num]+x[i:] for x in ans for i in range(len(x)+1)]

        return ans
