Link: https://leetcode.com/problems/3sum-closest/description/

This question is very similar as the 15. 3Sum question. In fact, it is easier as we don't have to remove the duplicates.

class Solution(object):
    def threeSumClosest(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        nums = sorted(nums)
        ans = sum(nums[:3])

        for i in range(len(nums)-2):
            l, r = i+1, len(nums)-1
            while l<r:
                threeSum = nums[i] + nums[l] + nums[r]
                ans = threeSum if abs(target-threeSum)<abs(target-ans) else ans
                if threeSum < target:
                    l+=1
                elif threeSum > target:
                    r-=1
                else:
                    return ans

        return ans
