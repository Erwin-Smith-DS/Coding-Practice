Here is the link: https://leetcode.com/problems/two-sum/description/


Solution 1 is brute force. The complexity is O(n^2)

class Solution(object):
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        for i in range(len(nums)):
            for j in range(i+1, len(nums)):
                if nums[i]+nums[j]==target:
                    return [i, j]

Solution 2 is to utilize the dictionary. The searching in Hashmap keys is constant, i.e., O(1).

class Solution(object):
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        # if target-nums[i] in dic.keys: return [i, the key]; dic[nums[i]] = i
        dic = {}
        for i in range(len(nums)):
            target_val = target-nums[i]
            if target_val in dic.keys():
                return [i, dic[target_val]]
            else:
                dic[nums[i]]=i
